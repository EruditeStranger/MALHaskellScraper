comments :: Scraper Text [Text]
comments = texts $ "span" @: [hasClass "commtext"]

scrapper :: String -> IO (Maybe [Text])
scrapper url = scrapeURL url comments
where
    comments :: Scraper Text [Text]
    comments = texts $ "span" @: [hasClass "commtext"]
    
fmap pipe <$> scrapper url
tokenizer :: [Text] -> [Text]
tokenizer = concatMap (concatMap processor . Text.words)
where
    cleaner   = Text.filter (`notElem` (",.><?!-:;\"\'()" :: String))
    processor = Text.splitOn "/" . Text.toLower . cleaner
    
mapReduce :: [Text] -> [(Text, Integer)]
mapReduce = reducer . mapper
where
    mapper :: [Text] -> [(Text, Integer)]
    mapper = map (, 1)

    reducer :: [(Text, Integer)] -> [(Text, Integer)]
    reducer = Map.toList . foldr (uncurry $ Map.insertWith (+)) Map.empty
    
sorted :: [(Text, Integer)] -> [(Text, Integer)]
sorted = sortBy $ \(_, x) (_, y) -> compare y x

pipe = sorted . mapReduce . tokenizer
where
    sorted :: [(Text, Integer)] -> [(Text, Integer)]
    sorted = sortBy $ \(_, x) (_, y) -> compare y x

result <- fmap pipe <$> scrapper url

case result of
  Nothing     -> putStrLn "Failed to scrap or parse"
  Just tokens -> mapM_ print $ filter byRelevancy tokens
    where
      byRelevancy :: (Text, Integer) -> Bool
      byRelevancy (token, count) = popular && relevant
        where
          popular  = count > 3
          relevant = token `elem` languages
languages :: [Text]
languages = [ "scala", "haskell", "clojure", "f#", "fsharp", "java", "erlang"
            , "javascript", "python", "scheme", "elixir", "lisp", "racket"
            , "elm", "purescript", "ml", "ocaml", "react", "reason", "reasonml"
            , "net", "jvm", "beam", "llvm", "scalajs", "clojurescript", "ghcjs"
            ]
